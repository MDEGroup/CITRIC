module C2B;

create OUT : B from IN : C;

helper def: counter : Integer = 1;

rule H2D {
	from
		s : C!H
	to
		t : B!D (name <- t.oclType().name.toString().toLower() + '_' + thisModule.counter)
	do {
		thisModule.counter <- thisModule.counter + 1;
	}
}

rule I2E {
	from
		s : C!I
	to
		t : B!E (name <- t.oclType().name.toString().toLower() + '_' + thisModule.counter)
	do {
		thisModule.counter <- thisModule.counter + 1;
	}
}

rule M2G {
	from
		s : C!M
	to
		t : B!G (name <- t.oclType().name.toString().toLower() + '_' + thisModule.counter)
	do {
		thisModule.counter <- thisModule.counter + 1;
	}
}