module D2A;

create OUT : A from IN : D;

helper def: counter : Integer = 1;

rule V_N2A {
	from
		s_1 : D!V,
		s_2 : D!N
	to
		t : A!A (name <- t.oclType().name.toString().toLower() + '_' + thisModule.counter)
	do {
		thisModule.counter <- thisModule.counter + 1;
	}
	
}

rule O_P2B {
	from
		s_1 : D!O,
		s_2 : D!P
	to
		t : A!B (name <- t.oclType().name.toString().toLower() + '_' + thisModule.counter)
	do {
		thisModule.counter <- thisModule.counter + 1;
	}
	
}

rule C2Q {
	from
		s : D!Q
	to
		t : A!C (name <- t.oclType().name.toString().toLower() + '_' + thisModule.counter)
	do {
		thisModule.counter <- thisModule.counter + 1;
	}
}