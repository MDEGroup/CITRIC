-- @name			DSL
-- @version			1.1
-- @authors			Guillaume Hillairet (g.hillairet@gmail.com), William Piers (willaim.piers@gmail.com)
-- @date			2005/06/14
-- @description		This meta-model represents domain models (or metamodels in MDA) used by Microsoft DSL Tools (May 2005 CTP release for Visual Studio 2005 Beta 2). With DSL Tools you can create your own designer for a visual domain specific language that is represent by a domain model. The tools generate the code of a graphical editor for the language you defined in a domain model.
-- @see				http://lab.msdn.microsoft.com/teamsystem/workshop/dsltools/

package DSL {

	abstract class NamedElement {
		attribute name : String;
		attribute identity : String;		
	}

	abstract class LoadedElement extends Namespace {
		attribute isLoaded : Boolean;
	}
	
	abstract class Namespace extends NamedElement {
		attribute namespace : String;
	}
	
	-- @comment This class represents a domain model which contains classes and relationships.
	class DomainModel extends LoadedElement {
		reference classifiers[*] container : Classifier oppositeOf domainModel;
		reference types[*] container : Type;
	}
	-- @begin Classifiers
	-- @comment This class represents a Classifier. It has properties, may have one super type and can be abstract.
	abstract class Classifier extends LoadedElement {
		attribute isAbstract : Boolean;
		reference properties[*] container : ValueProperty oppositeOf owner;
		reference superType[0-1] : Classifier oppositeOf subTypes;
		reference subTypes[*] : Classifier oppositeOf superType;
		reference domainModel : DomainModel oppositeOf classifiers;
	}
	-- @comment This class corresponds to a class in DSL. It extends Classifier.
	class Class extends Classifier {}
	-- @comment This class corresponds to a relationship in DSL. A relationship is view as a class so it extends Classifer.It has two roles, and can be an embedding or a reference.
	class Relationship extends Classifier {
		attribute isEmbedding : Boolean;
		reference roles[2-2] container : Role oppositeOf relation;
	}
	-- @comment This class represents a role. A role can be view as an association end, it has cardinality (min, max) and can be ordered.
	class Role extends NamedElement {
		attribute min : Integer;
		attribute max : Integer;
		attribute isUnbounded : Boolean;
		attribute accepts : String;
		attribute isOrdered : Boolean;
		attribute isNavigableFrom : Boolean;
		attribute isPropertyGenerator : Boolean;
		
 		reference source : Classifier;
	 	reference type : Classifier;
		reference relation : Relationship oppositeOf roles;
	}
	
	-- @end Classifiers	
	
	-- @begin Types
	-- @comment This class represents a property. A property is had by a classifier, the type of the property is represent by the class Type.
	class ValueProperty extends NamedElement {
		reference owner : Classifier oppositeOf properties;
		reference type : Type;
	}
	
	abstract class Type extends Namespace {}
	
	class SimpleType extends Type {}
	
	class EnumerationLiteral extends NamedElement {
		attribute value : Integer;
	}
	-- @comment This class represents an enumeration. 
	class Enumeration extends Type {
		reference literals[*] container : EnumerationLiteral;
	}
	-- @end Types
	
	package PrimitiveTypes {
		datatype Boolean;
		datatype Integer;
		datatype String;
	}
}
