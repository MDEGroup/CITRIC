module MADL2DOT;
create OUT : DOT from IN : MADL;

rule Graph {
 from
  root : MADL!Implementation
 to
  graph : DOT!Graph (
   type <- 'digraph',
   name <- 'Conformance model in DOT',
   compound <- true,
   rankDir <- 'TB',
   nodes <- MADL!ViewEntity->allInstances(),
   arcs <- MADL!ViewRelation->allInstances()
  )
}

rule NodeModule {
 from
  el : MADL!Module
 to
  node : DOT!Node (
   name <- el.name,
   shape <- sh,
   style <- if el.conformance = #absent then
    'dotted'
   else
    if el.conformance = #divergent then
     'dashed'
    else
     'solid'
    endif
   endif,
   label <- lab
  ),
  sh : DOT!SimpleNodeShape (
   name <- 'box'
  ),
  lab : DOT!SimpleLabel (
   content <- '<<module>>\\n' + el.name
  )
}

rule ArcUses {
 from
  rel : MADL!Uses
 to
  arc : DOT!DirectedArc (
   fromNode <- rel.sourceUses,
   toNode <- rel.uses,
   style <- if rel.conformance = #absent then
    'dotted'
   else
    if rel.conformance = #divergent then
     'dashed'
    else
     'solid'
    endif
   endif,
   constraint <- true,
   label <- lab
  ),
  lab : DOT!SimpleLabel (
   content <- '<<uses>>'
  )
}

helper context MADL!Uses def: sourceUses : MADL!Module =
 MADL!Module->allInstances()->any(ent |
  ent.uses->includes(self)
 );
