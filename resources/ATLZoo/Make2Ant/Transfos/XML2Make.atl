module XML2Make;
create OUT : Make from IN : XML;

----------------------------------------------------------------------------------
-- helper : to extract a list of String from a String

-- extract a sequence of String from the String listString in the same order
-- (two elements are separated by a comma)
helper def:getList(listString : String):Sequence(String)=
	if(listString.size()=0)
		then Sequence{}
		else thisModule.getListAux(listString,1,1,Sequence{})
		endif;

-- index1 : begin of the word
-- index2 : compteur
helper def:getListAux(listString : String,index1 : Integer,index2 : Integer,provSequence : Sequence(String)):Sequence(String)=
	--let car : Sequence(String) = listString.substring(index2,index2) in
	if (listString.size()<index2)
		then provSequence -> append(listString.substring(index1,index2-1))
		else
			if listString.substring(index2,index2)=' ' --or(car='\t'))and not index1=index2
				then thisModule.getListAux(listString,index2+1,index2+1, provSequence -> append(listString.substring(index1,index2-1)))
				else thisModule.getListAux(listString,index1,index2+1, provSequence)
			endif
	endif;
------------------------------------------------------------------------------------------
-- helper : to get an attribute

-- returns the value of the attribute 'name' (without test of existence)
helper context XML!Element def: getAttrVal(name : String) : String =
    self.children->
		select(c | c.oclIsKindOf(XML!Attribute) and c.name = name)
			->first().value;

-- returns true if the attribute 'name' is defined
helper context XML!Element def: testAttribute(name : String) : Boolean =
	not (self.children -> select(d | d.oclIsKindOf(XML!Attribute) and d.name = name)->
		first().oclIsUndefined());


-- returns the value of the attribute given in parameter
-- returns '' if this attribute does not exist
helper context XML!Element def:getAttribute(name : String):String = 
	if (self.testAttribute(name))
		then self.getAttrVal(name)
		else ''
		endif;

-----------------------------------------------------------------------------------
-- returns the value  of a text belonging to an element
helper context XML!Element def: getText() : String =
    	self.children ->
					select(c | c.oclIsKindOf(XML!Text)) -> 
						first().value;



-----------------------------------------------------------------------------------
-- rules

-- central rule
rule Root2MakeFile{
	from i : XML!Root
	to o : Make!Makefile(
		name <- 'makefile',
		comment <- i.children ->
					select(d | d.oclIsKindOf(XML!Element) and d.name = 'comment')
						-> first(),
		elements <- i.children ->
					select(d | d.oclIsKindOf(XML!Element) and not (d.name = 'comment'))
	)
}

rule Comment{
	from i : XML!Element(
		i.name = 'comment'
	)
	to o : Make!Comment(
		text <- i.getText()
	)
}

rule Rule{
	from i : XML!Element(
		i.name = 'rule'
	)
	using{
	allRules : Sequence(XML!Element) = XML!Element.allInstances() ->
			select(d |  d.name = 'rule' );
	itsDependencies : Sequence(String) = thisModule.getList(i.getAttribute('depends'));
	itsRuleDep : Sequence(XML!Element) = XML!Element.allInstances() ->
			select(d |  d.name = 'rule' 
				and itsDependencies ->
						includes( d.getAttribute('name')));
	itsFileDep : Sequence(String) = itsDependencies ->
				select(d | allRules -> select(e|e.getAttribute('name')=d)-> isEmpty()) ;
	}
	to o : Make!Rule(
		name <- i.getAttribute('name'),
		dependencies <-  Sequence{makeRuleDep,makeFileDep},
		shellLines <-  i.children ->
					select(d | d.oclIsKindOf(XML!Element) and d.name = 'shellLine')
	),
	makeRuleDep : distinct Make!RuleDep foreach(dep in itsRuleDep)(
		ruledep	<- dep
	),
	makeFileDep : distinct Make!FileDep foreach(depFile in itsFileDep)(
		name <- depFile
	)		
}


rule Macro{
	from i : XML!Element(
		i.name = 'macro'
	)
	to o : Make!Macro(
		name <- i.getAttribute('name'),
		value <- i.getAttribute('value')
	)
}

helper context XML!Element def : getShellLine():String=
	let thisText : String = self.getText() in
	if (thisText.substring(1,1)='@')
		then thisText.substring(2,thisText.size())
		else thisText
		endif;

rule ShellLine{
	from i : XML!Element(
		i.name = 'shellLine'
	)
	to o  : Make!ShellLine(
		command <- i.getShellLine(),
		display <- not (i.getText().substring(1,1)='@')
	)
}