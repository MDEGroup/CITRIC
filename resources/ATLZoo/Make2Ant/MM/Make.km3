-- @name			Make
-- @version			0.3
-- @domains			build tool
-- @authors			Julien Ruchaud, Pauline Brunel (pabrunel@numericable.fr)
-- @date			2005/07/06
-- @description			A metamodel describing the build tool Make: make is a UNIX® utility intended to automate and optimize the construction of programs. It can help develop programs when they consist of many components or source files. A descriptor file, namely makefile, describes the relationship among source files and provides commands for updating each file. Make invokes makefile to automatically rebuild a program whenever one of the source files is modified. It only recompiles the files that were affected by changes, thus saving compiling time. This helps reduce the likelihood of human errors when making entries from the command line. Apart from compilation, make is an effective tool for program installation and system configuration changes. 
-- @see				http://www.gnu.org/software/make/, http://en.wikipedia.org/wiki/Make

package Make {
  -- @begin make
  
  	-- @begin centralClass
  class Makefile {
   	attribute name : String;
   	reference comment[0-1] container : Comment;
   	reference elements[1-*] ordered container : Element;
  }
 	 -- @end centralClass

  	-- @begin Elements
  -- @comments represents differents elements contained in the makefile
  abstract class Element {
   	attribute name : String;
  }

  -- @comments represents a rule : a group of dependencies and of shellLines
  class Rule extends Element {
    reference dependencies[*] ordered container : Dependency;
    reference shellLines [1-*] ordered container : ShellLine oppositeOf ruleShellLine;
  }

  -- @comments represents a macro : to give a value
  class Macro extends Element {
   	attribute value : String;
  }
  	-- @end Elements

  	-- @begin shellLine
  class ShellLine{
   	attribute command : String;
   	attribute display : Boolean;
   	reference ruleShellLine : Rule oppositeOf shellLines;
  }
  	-- @end shellLine
  	-- @begin comment
  class Comment{
   	attribute text : String;
  }
	 -- @end comment
 	-- @begin dependencies
 -- @comments represents a dependency contained in a rule
  abstract class Dependency {
  }

  -- @comments represents a dependency which call another rule
  class RuleDep extends Dependency {
    reference ruledep : Rule;
  }

  -- @comments represents a file dependency
  class FileDep extends Dependency {
   	attribute name : String;
  }
 	-- @end dependencies
 -- @end make
}

package PrimitiveTypes{
 datatype String;
 datatype Boolean;
}
