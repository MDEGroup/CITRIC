<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<Metamodel>
  <Package name = 'JavaAbstractSyntax'>
    <Class name = 'AST' isAbstract = 'false' supertypes = ''>
      <Reference name = 'root' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::ASTNode' opposite = ''/>
    </Class>
    <Class name = 'ASTNode' isAbstract = 'true' supertypes = ''/>
    <Class name = 'AnonymousClassDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'bodyDeclarations' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::BodyDeclaration' opposite = ''/>
    </Class>
    <Class name = 'BodyDeclaration' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'modifiers' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::ExtendedModifier' opposite = ''/>
      <Reference name = 'javadoc' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Javadoc' opposite = ''/>
    </Class>
    <Class name = 'CatchClause' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Block' opposite = ''/>
      <Reference name = 'exception' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SingleVariableDeclaration' opposite = ''/>
    </Class>
    <Class name = 'Comment' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'alternateRoot' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'false' type = 'JavaAbstractSyntax::ASTNode' opposite = ''/>
    </Class>
    <Class name = 'CompilationUnit' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'comments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Comment' opposite = ''/>
      <Reference name = 'package' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::PackageDeclaration' opposite = ''/>
      <Reference name = 'imports' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::ImportDeclaration' opposite = ''/>
      <Reference name = 'types' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::AbstractTypeDeclaration' opposite = ''/>
    </Class>
    <Class name = 'Expression' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Attribute name = 'resolveBoxing' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'resolveUnboxing' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'ImportDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Attribute name = 'onDemand' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'static' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'MemberRef' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'MemberValuePair' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'value' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'MethodRef' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
      <Reference name = 'parameters' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::MethodRefParameter' opposite = ''/>
    </Class>
    <Class name = 'MethodRefParameter' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Attribute name = 'varargs' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'ExtendedModifier' isAbstract = 'true' supertypes = ''/>
    <Class name = 'Modifier' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode, JavaAbstractSyntax::ExtendedModifier'>
      <Attribute name = 'abstract' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'final' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'native' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'none' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'private' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'protected' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'public' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'static' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'strictfp' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'synchronized' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'transient' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'volatile' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'PackageDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'annotations' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Annotation' opposite = ''/>
      <Reference name = 'javadoc' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Javadoc' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'Statement' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::ASTNode'/>
    <Class name = 'TagElement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'fragments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::ASTNode' opposite = ''/>
      <Attribute name = 'tagName' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Attribute name = 'nested' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'TextElement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Attribute name = 'text' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'Type' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::ASTNode'/>
    <Class name = 'TypeParameter' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'typeBounds' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'VariableDeclaration' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::ASTNode'>
      <Attribute name = 'extraDimensions' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Integer'/>
      <Reference name = 'initializer' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
    </Class>
    <Class name = 'AbstractTypeDeclaration' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::BodyDeclaration'>
      <Reference name = 'bodyDeclarations' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::BodyDeclaration' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Attribute name = 'localTypeDeclaration' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'memberTypeDeclaration' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'packageMemberTypeDeclaration' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'AnnotationTypeMemberDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::BodyDeclaration'>
      <Reference name = 'default' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'EnumConstantDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::BodyDeclaration'>
      <Reference name = 'arguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'anonymousClassDeclaration' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::AnonymousClassDeclaration' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
    </Class>
    <Class name = 'FieldDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::BodyDeclaration'>
      <Reference name = 'fragments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::VariableDeclarationFragment' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'Initializer' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::BodyDeclaration'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Block' opposite = ''/>
    </Class>
    <Class name = 'MethodDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::BodyDeclaration'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Block' opposite = ''/>
      <Attribute name = 'extraDimensions' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Integer'/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'returnType' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Attribute name = 'constructor' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Attribute name = 'varargs' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Reference name = 'parameters' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::SingleVariableDeclaration' opposite = ''/>
      <Reference name = 'thrownExceptions' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
      <Reference name = 'typeParameters' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::TypeParameter' opposite = ''/>
    </Class>
    <Class name = 'AnnotationTypeDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::AbstractTypeDeclaration'/>
    <Class name = 'EnumDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::AbstractTypeDeclaration'>
      <Reference name = 'superInterfaceTypes' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Reference name = 'enumConstants' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::EnumConstantDeclaration' opposite = ''/>
    </Class>
    <Class name = 'TypeDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::AbstractTypeDeclaration'>
      <Reference name = 'superclassType' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Attribute name = 'interface' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Reference name = 'superInterfaceTypes' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Reference name = 'typeParameters' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::TypeParameter' opposite = ''/>
    </Class>
    <Class name = 'BlockComment' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Comment'/>
    <Class name = 'Javadoc' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Comment'>
      <Reference name = 'tags' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::TagElement' opposite = ''/>
    </Class>
    <Class name = 'LineComment' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Comment'/>
    <Class name = 'Annotation' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::Expression, JavaAbstractSyntax::ExtendedModifier'>
      <Reference name = 'typeName' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'ArrayAccess' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'array' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'index' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'ArrayCreation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'dimensions' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'initializer' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::ArrayInitializer' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::ArrayType' opposite = ''/>
    </Class>
    <Class name = 'ArrayInitializer' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'expressions' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'Assignment' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'leftHandSide' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Attribute name = 'operator' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'JavaAbstractSyntax::AssignementOperatorKind'/>
      <Reference name = 'rightHandSide' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Enumeration name = 'AssignementOperatorKind'>
      <EnumLiteral name = 'RIGHT_SHIFT_SIGNED_ASSIGN'/>
      <EnumLiteral name = 'BIT_XOR_ASSIGN'/>
      <EnumLiteral name = 'TIMES_ASSIGN'/>
      <EnumLiteral name = 'LEFT_SHIFT_ASSIGN'/>
      <EnumLiteral name = 'MINUS_ASSIGN'/>
      <EnumLiteral name = 'BIT_OR_ASSIGN'/>
      <EnumLiteral name = 'PLUS_ASSIGN'/>
      <EnumLiteral name = 'ASSIGN'/>
      <EnumLiteral name = 'RIGHT_SHIFT_UNSIGNED_ASSIGN'/>
      <EnumLiteral name = 'REMAINDER_ASSIGN'/>
      <EnumLiteral name = 'DIVIDE_ASSIGN'/>
      <EnumLiteral name = 'BIT_AND_ASSIGN'/>
    </Enumeration>
    <Class name = 'BooleanLiteral' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Attribute name = 'booleanValue' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'CastExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'CharacterLiteral' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Attribute name = 'charValue' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Character'/>
      <Attribute name = 'escapedValue' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'ClassInstanceCreation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'arguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'anonymousClassDeclaration' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::AnonymousClassDeclaration' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Reference name = 'typeArguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'ConditionalExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'elseExpression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'thenExpression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'FieldAccess' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
    </Class>
    <Class name = 'InfixExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'extendedOperands' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'leftOperand' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Attribute name = 'operator' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'JavaAbstractSyntax::InfixExpressionOperatorKind'/>
      <Reference name = 'rightOperand' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Enumeration name = 'InfixExpressionOperatorKind'>
      <EnumLiteral name = 'GREATER_EQUALS'/>
      <EnumLiteral name = 'OR'/>
      <EnumLiteral name = 'RIGHT_SHIFT_SIGNED'/>
      <EnumLiteral name = 'MINUS'/>
      <EnumLiteral name = 'XOR'/>
      <EnumLiteral name = 'LESS_EQUALS'/>
      <EnumLiteral name = 'EQUALS'/>
      <EnumLiteral name = 'NOT_EQUALS'/>
      <EnumLiteral name = 'AND'/>
      <EnumLiteral name = 'PLUS'/>
      <EnumLiteral name = 'GREATER'/>
      <EnumLiteral name = 'CONDITIONAL_OR'/>
      <EnumLiteral name = 'REMAINDER'/>
      <EnumLiteral name = 'LESS'/>
      <EnumLiteral name = 'LEFT_SHIFT'/>
      <EnumLiteral name = 'RIGHT_SHIFT_UNSIGNED'/>
      <EnumLiteral name = 'CONDITIONAL_AND'/>
      <EnumLiteral name = 'TIMES'/>
      <EnumLiteral name = 'DIVIDE'/>
    </Enumeration>
    <Class name = 'InstanceofExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'leftOperand' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'rightOperand' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'MethodInvocation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'arguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'typeArguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'Name' isAbstract = 'true' supertypes = 'JavaAbstractSyntax::Expression'>
      <Attribute name = 'fullyQualifiedName' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'NullLiteral' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'/>
    <Class name = 'NumberLiteral' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Attribute name = 'token' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'ParenthesizedExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'PostfixExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'operand' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Attribute name = 'operator' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'JavaAbstractSyntax::PostfixExpresssionOperatorKind'/>
    </Class>
    <Enumeration name = 'PostfixExpresssionOperatorKind'>
      <EnumLiteral name = 'INCREMENT'/>
      <EnumLiteral name = 'DECREMENT'/>
    </Enumeration>
    <Class name = 'PrefixExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'operand' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Attribute name = 'operator' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'JavaAbstractSyntax::PrefixExpresssionOperatorKind'/>
    </Class>
    <Enumeration name = 'PrefixExpresssionOperatorKind'>
      <EnumLiteral name = 'MINUS'/>
      <EnumLiteral name = 'NOT'/>
      <EnumLiteral name = 'DECREMENT'/>
      <EnumLiteral name = 'COMPLEMENT'/>
      <EnumLiteral name = 'INCREMENT'/>
      <EnumLiteral name = 'PLUS'/>
    </Enumeration>
    <Class name = 'StringLiteral' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Attribute name = 'escapedValue' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Attribute name = 'literalValue' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'SuperFieldAccess' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'SuperMethodInvocation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'arguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
      <Reference name = 'typeArguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'ThisExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'TypeLiteral' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'VariableDeclarationExpression' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Expression'>
      <Reference name = 'fragments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::VariableDeclarationFragment' opposite = ''/>
      <Reference name = 'modifiers' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::ExtendedModifier' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'AssertStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'message' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'Block' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'statements' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
    </Class>
    <Class name = 'BreakStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'label' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
    </Class>
    <Class name = 'ConstructorInvocation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'arguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'typeArguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'ContinueStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'label' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
    </Class>
    <Class name = 'DoStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'EmptyStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'/>
    <Class name = 'EnhancedForStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'parameter' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SingleVariableDeclaration' opposite = ''/>
    </Class>
    <Class name = 'ExpressionStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'ForStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'initializers' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'updaters' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'IfStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'elseStatement' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'thenStatement' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
    </Class>
    <Class name = 'LabeledStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
      <Reference name = 'label' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
    </Class>
    <Class name = 'ReturnStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'SuperConstructorInvocation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'arguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'typeArguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'SwitchCase' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Attribute name = 'default' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'SwitchStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
      <Reference name = 'statements' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
    </Class>
    <Class name = 'SynchronizedStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Block' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'ThrowStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'TryStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'catchClauses' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::CatchClause' opposite = ''/>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Block' opposite = ''/>
      <Reference name = 'finally' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Block' opposite = ''/>
    </Class>
    <Class name = 'TypeDeclarationStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'declaration' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::AbstractTypeDeclaration' opposite = ''/>
    </Class>
    <Class name = 'VariableDeclarationStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'fragments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::VariableDeclarationFragment' opposite = ''/>
      <Reference name = 'modifiers' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::ExtendedModifier' opposite = ''/>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'WhileStatement' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Statement'>
      <Reference name = 'body' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Statement' opposite = ''/>
      <Reference name = 'expression' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
    <Class name = 'ArrayType' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Type'>
      <Reference name = 'componentType' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Attribute name = 'dimensions' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Integer'/>
      <Reference name = 'elementType' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'ParameterizedType' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Type'>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Reference name = 'typeArguments' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'PrimitiveType' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Type'>
      <Attribute name = 'code' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
    </Class>
    <Class name = 'QualifiedType' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Type'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
    </Class>
    <Class name = 'SimpleType' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Type'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'WildcardType' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Type'>
      <Reference name = 'bound' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Attribute name = 'upperBound' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'SingleVariableDeclaration' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::VariableDeclaration'>
      <Reference name = 'type' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Type' opposite = ''/>
      <Attribute name = 'varargs' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
      <Reference name = 'modifiers' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::ExtendedModifier' opposite = ''/>
    </Class>
    <Class name = 'VariableDeclarationFragment' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::VariableDeclaration'/>
    <Class name = 'QualifiedName' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Name'>
      <Reference name = 'name' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::SimpleName' opposite = ''/>
      <Reference name = 'qualifier' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Name' opposite = ''/>
    </Class>
    <Class name = 'SimpleName' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Name'>
      <Attribute name = 'identifier' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::String'/>
      <Attribute name = 'declaration' lower = '1' upper = '1' isOrdered = 'false' isUnique = 'false' type = 'PrimitiveTypes::Boolean'/>
    </Class>
    <Class name = 'MarkerAnnotation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Annotation'/>
    <Class name = 'NormalAnnotation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Annotation'>
      <Reference name = 'values' lower = '0' upper = '-1' isOrdered = 'true' isContainer = 'true' type = 'JavaAbstractSyntax::MemberValuePair' opposite = ''/>
    </Class>
    <Class name = 'SingleMemberAnnotation' isAbstract = 'false' supertypes = 'JavaAbstractSyntax::Annotation'>
      <Reference name = 'value' lower = '1' upper = '1' isOrdered = 'false' isContainer = 'true' type = 'JavaAbstractSyntax::Expression' opposite = ''/>
    </Class>
  </Package>
  <Package name = 'PrimitiveTypes'>
    <DataType name = 'String'/>
    <DataType name = 'Boolean'/>
    <DataType name = 'Integer'/>
    <DataType name = 'Character'/>
  </Package>
</Metamodel>
